import logging
import os
import subprocess
import tempfile
from pathlib import Path
from xml.dom import minidom
# pylint: disable=E0401
# from dvm_permissions import DVM_PERMISSIONS
# from android_manifest_desc import MANIFEST_DESC
import xml.dom.minidom
logger = logging.getLogger(__name__)

def get_browsable_activities(node):
    """Get Browsable Activities."""
    try:
        browse_dic = {}
        schemes = []
        mime_types = []
        hosts = []
        ports = []
        paths = []
        path_prefixs = []
        path_patterns = []
        catg = node.getElementsByTagName('category')
        for cat in catg:
            if cat.getAttribute('android:name') == 'android.intent.category.BROWSABLE':
                data_tag = node.getElementsByTagName('data')
                for data in data_tag:
                    scheme = data.getAttribute('android:scheme')
                    if scheme and scheme not in schemes:
                        schemes.append(scheme)
                    mime = data.getAttribute('android:mimeType')
                    if mime and mime not in mime_types:
                        mime_types.append(mime)
                    host = data.getAttribute('android:host')
                    if host and host not in hosts:
                        hosts.append(host)
                    port = data.getAttribute('android:port')
                    if port and port not in ports:
                        ports.append(port)
                    path = data.getAttribute('android:path')
                    if path and path not in paths:
                        paths.append(path)
                    path_prefix = data.getAttribute('android:pathPrefix')
                    if path_prefix and path_prefix not in path_prefixs:
                        path_prefixs.append(path_prefix)
                    path_pattern = data.getAttribute('android:pathPattern')
                    if path_pattern and path_pattern not in path_patterns:
                        path_patterns.append(path_pattern)
        schemes = [scheme + '://' for scheme in schemes]
        browse_dic['schemes'] = schemes
        browse_dic['mime_types'] = mime_types
        browse_dic['hosts'] = hosts
        browse_dic['ports'] = ports
        browse_dic['paths'] = paths
        browse_dic['path_prefixs'] = path_prefixs
        browse_dic['path_patterns'] = path_patterns
        browse_dic['browsable'] = bool(browse_dic['schemes'])
        return browse_dic
    except Exception:
        logger.exception('Getting Browsable Activities')


def manifest_data(mfxml,MANIFEST_DESC):
    """Extract manifest data."""
    try:
        applications = mfxml.getElementsByTagName('application')
        ret_value = []
        ret_list = []
        browsable_activities = {}
        for application in applications:
            if application.getAttribute('android:usesCleartextTraffic') == 'true':
                ret_list.append(('clear_text_traffic', (), ()))
            if application.getAttribute('android:directBootAware') == 'true':
                ret_list.append(('direct_boot_aware', (), ()))
            if application.getAttribute('android:networkSecurityConfig'):
                item = application.getAttribute('android:networkSecurityConfig')
                ret_list.append(('has_network_security', (item,), ()))
            if application.getAttribute('android:debuggable') == 'true':
                ret_list.append(('app_is_debuggable', (), ()))
            if application.getAttribute('android:allowBackup') == 'true':
                ret_list.append(('app_allowbackup', (), ()))
            elif application.getAttribute('android:allowBackup') == 'false':
                pass
            else:
                ret_list.append(('allowbackup_not_set', (), ()))
            if application.getAttribute('android:testOnly') == 'true':
                ret_list.append(('app_in_test_mode', (), ()))
            for node in application.childNodes:
                if node.nodeName == 'activity':
                    itemname = 'Activity'

                    browse_dic = get_browsable_activities(node)
                    if browse_dic['browsable']:
                        browsable_activities[node.getAttribute(
                            'android:name')] = browse_dic
                elif node.nodeName == 'activity-alias':
                    itemname = 'Activity-Alias'
                    browse_dic = get_browsable_activities(node)
                    if browse_dic['browsable']:
                        browsable_activities[node.getAttribute(
                            'android:name')] = browse_dic
                elif node.nodeName == 'provider':
                    itemname = 'Content Provider'
                    cnt_id = 'cnt'
                elif node.nodeName == 'receiver':
                    itemname = 'Broadcast Receiver'
                    cnt_id = 'bro'
                elif node.nodeName == 'service':
                    itemname = 'Service'
                    cnt_id = 'ser'
                else:
                    itemname = 'NIL'
                item = ''
                # Task Affinity
                if (
                        itemname in ['Activity', 'Activity-Alias'] and
                        node.getAttribute('android:taskAffinity')
                ):
                    item = node.getAttribute('android:name')
                    ret_list.append(('task_affinity_set', (item,), ()))
        for a_key, t_name, t_desc in ret_list:
            a_template = MANIFEST_DESC.get(a_key)
            if a_template:
                ret_value.append({
                    'rule': a_key,
                    'title': a_template['title'] % t_name,
                    'severity': a_template['level'],
                    'description': a_template['description'] % t_desc,
                    'name': a_template['name'] % t_name,
                    'component': t_name,
                })
        print(ret_value)
        return ret_value
    except Exception:
        logger.exception('Extracting Manifest Data')

def get_exported(mfxml):
    """Extract manifest data."""
    try:
        applications = mfxml.getElementsByTagName('application')
        exported = []
        for application in applications:
            for node in application.childNodes:
                if node.nodeName == 'activity':
                    if node.getAttribute('android:exported') == 'true':
                        exported.append(node.getAttribute('android:name'))
        print(exported)
        return exported
    except Exception:
        logger.exception('Extracting Manifest Data')



# if __name__ == "__main__":
#     # Đọc nội dung tệp AndroidManifest.xml và tạo đối tượng XML DOM
#     with open("AndroidManifest.xml", "r") as manifest_file:
#         xml_content = manifest_file.read()
#         mfxml = xml.dom.minidom.parseString(xml_content)
#     get_exported(mfxml)